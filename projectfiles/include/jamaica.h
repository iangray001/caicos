#ifndef __JAMAICA__
#define __JAMAICA__

#include "jamaica_config.h"
#include <stdlib.h>
#include "jamaica_errors_constants.h"
#include <math.h>


//Struct prototypes
typedef struct jamaica_VM jamaica_VM;
typedef struct jamaica_thread jamaica_thread;
//typedef struct jamaica_cpu jamaica_cpu;


#define JBICALL
#define JBIEXPORT
#define INLINE_FUNCTION

//Define the Jamaica types
typedef unsigned int jamaica_ref;
typedef signed int jamaica_int32; //Was signed long
typedef signed short jamaica_int16;
typedef signed char jamaica_int8;
typedef unsigned int jamaica_uint32; //Was unsigned long
typedef unsigned short jamaica_uint16;
typedef unsigned char jamaica_uint8;
typedef float jamaica_float;
typedef char* jamaica_address;
typedef signed long long jamaica_int64;
typedef unsigned long long jamaica_uint64;
typedef double jamaica_double;
typedef jamaica_int32 jamaica_bool;
typedef long jamaica_native_longjump;


//Some constants used by the autogenerated code.
#define JAMAICAGC_HEAD_COLOR 0
#define JAMAICAGC_HEAD_SIZE 1
#define JAMAICA_OBJECT_HEADER_SIZE (JAMAICAGC_HEAD_SIZE+2)   /* Offset of the first usable field in an object */
#define JAMAICA_ARRAY_USER_HEADER_WORDS JAMAICA_OBJECT_HEADER_SIZE  /* class, monitor */

//#define JAMAICA_NULL ((jamaica_ref)0)
#define JAMAICA_NULL (0)


#define JAMAICA_THREAD_UNNORMAL_STATES_SHIFT 3
#define JAMAICA_THREAD_NORMAL_STATE_MASK ((1 << JAMAICA_THREAD_UNNORMAL_STATES_SHIFT) - 1)
#define JAMAICA_THREAD_STATE_SYNC_BIT (1 << JAMAICA_THREAD_UNNORMAL_STATES_SHIFT)

typedef enum {
	JAMAICA_THREAD_STATE_RUNNING=0,
	JAMAICA_THREAD_STATE_DETACHABLE=2,
	JAMAICA_THREAD_STATE_READY=3,
	JAMAICA_THREAD_STATE_BLOCKED=4,
	JAMAICA_THREAD_STATE_DETACHED=5,
	JAMAICA_THREAD_STATE_TERMINATED=6,
	JAMAICA_THREAD_STATE_SLEEPING=7,
	JAMAICA_THREAD_STATE_RESCHEDULING=JAMAICA_THREAD_STATE_RUNNING | JAMAICA_THREAD_STATE_SYNC_BIT,
	JAMAICA_THREAD_STATE_SYNC=JAMAICA_THREAD_STATE_RESCHEDULING | (2 << JAMAICA_THREAD_UNNORMAL_STATES_SHIFT)
} jamaicaScheduler_states;

#define TRUE 1
#define FALSE 0
#define JAMAICA_OK     0
#define JAMAICA_ERROR -1
#define TARGET_NATIVE_OK    1
#define TARGET_NATIVE_ERROR 0
typedef enum
{
	JAMAICA_NATIVE_ERROR,
	JAMAICA_NATIVE_OK
} jamaica_native_error;


/* Memory access macros and inlined functions
 *
 * __juniper_ram_master accesses are rewritten by caicos to provide getter and setter
 * function calls (which may be then inlined by HLS). This macro is called with a
 * jamaica_ref as b, which is interpreted as an int address.
 */
#define JAMAICA_BLOCK_GET_DATA32(b,ix) (__juniper_ram_master[(b) + (ix)])
#define JAMAICA_BLOCK_GET_DATA32_D0(b,ix) (__juniper_ram_master[(b) + (ix)])

/*
 * According to the comments, this macro may be used as an LHS or RHS so we
 * must convert it to getters and setters as with JAMAICA_BLOCK_GET_DATA32
 * The 64 bit view of memory is a union with l (long long) and d (double)
 * but also an int[2]. This would be indistinguishable from a normal int access
 * so we multiply the calculated address by 2 to turn a long long* into an int*
 * Then, existing memory access routines should just work.
 */
#define JAMAICA_BLOCK_GET_DATA64(b, ix) (__juniper_ram_master[((b) + (ix)) * 2])

#define JAMAICA_BLOCK_GET_I(b,ix) (JAMAICA_BLOCK_GET_DATA32(b,ix).i)
#define JAMAICA_BLOCK_GET_UI(b,ix) (JAMAICA_BLOCK_GET_DATA32(b,ix).ui)
#define JAMAICA_BLOCK_GET_L(b,ix) (JAMAICA_BLOCK_GET_DATA64(b,ix).l)
#define JAMAICA_BLOCK_GET_R(b,ix) (JAMAICA_BLOCK_GET_DATA32(b,ix).r)
#define JAMAICA_BLOCK_GET_P(b,off) ((jamaica_address) (JAMAICA_BLOCK_GET_I(b,off)))

#define JAMAICA_REF_TO_PTR(b) (b)
#define JAMAICA_ARRAY_LENGTH_DEPTH       (JAMAICA_ARRAY_USER_HEADER_WORDS+0)
#define JAMAICA_ARRAY_ELEMENTS           (JAMAICA_ARRAY_USER_HEADER_WORDS+1)
#define JAMAICA_ARRAY_HEADER_WORDS       JAMAICA_ARRAY_ELEMENTS
#define JAMAICA_ARRAY_BODY_SIZE          (JAMAICA_BLOCK_SIZE - JAMAICA_ARRAY_HEADER_WORDS)
#define JAMAICA_ARRAY_ELEMENTS_IN_HEADER ((JAMAICA_ARRAY_BODY_SIZE>JAMAICA_ARRAY_WIDTH)?JAMAICA_ARRAY_WIDTH:JAMAICA_ARRAY_BODY_SIZE)
#define JAMAICA_ARRAY_DEPTH_MASK         0x0000000f  /* depth  == LENGTH_DEPTH & DEPTH_MASK  >> DEPTH_SHIFT  */
#define JAMAICA_ARRAY_LENGTH_MASK        0xffffFFF0  /* length == LENGTH_DEPTH & LENGTH_MASK >> LENGTH_SHIFT */
#define JAMAICA_ARRAY_DEPTH_SHIFT        0
#define JAMAICA_ARRAY_LENGTH_SHIFT       4
#define JAMAICA_ARRAY64_ALIGNED         ((JAMAICA_ARRAY_ELEMENTS_IN_HEADER>1) && ((JAMAICA_BLOCK_SIZE & 1)==0))
#define JAMAICA_BLOCK_INDEX_BLOCKS(bs,r) (((jamaica_uint32)(r) - (jamaica_uint32)(bs)) / (JAMAICA_BLOCK_SIZE_BYTES))


//Arithmetic
#include "jamaica_arith.h"


//Arrays
jamaica_int32 jamaicaGC_GetArrayLength(jamaica_ref b);

jamaica_int8 jamaicaGC_GetArray8(jamaica_ref b, jamaica_int32 i);
jamaica_int16 jamaicaGC_GetArray16(jamaica_ref b, jamaica_int32 i);
jamaica_int32 jamaicaGC_GetArray32(jamaica_ref b, jamaica_int32 i);
jamaica_int64 jamaicaGC_GetArray64(jamaica_ref b, jamaica_int32 i);
jamaica_int8 jamaicaGC_GetArray8_d0(jamaica_ref b, jamaica_int32 i);
jamaica_int16 jamaicaGC_GetArray16_d0(jamaica_ref b, jamaica_int32 i);
jamaica_int32 jamaicaGC_GetArray32_d0(jamaica_ref b, jamaica_int32 i);
jamaica_int64 jamaicaGC_GetArray64_d0(jamaica_ref b, jamaica_int32 i);
jamaica_double jamaicaGC_GetArrayDouble(jamaica_ref b, jamaica_int32 i);
jamaica_double jamaicaGC_GetArrayDouble_d0(jamaica_ref b, jamaica_int32 i);
jamaica_float jamaicaGC_GetArrayFloat(jamaica_ref b, jamaica_int32 i);
jamaica_float jamaicaGC_GetArrayFloat_d0(jamaica_ref b, jamaica_int32 i);
jamaica_int32 jamaicaGC_GetArray32Ref(jamaica_ref b, jamaica_int32 i);
jamaica_int32 jamaicaGC_GetArray32Ref_d0(jamaica_ref b, jamaica_int32 i);
jamaica_ref jamaicaGC_GetRefArray(jamaica_ref b, jamaica_int32 i);

void jamaicaGC_SetArray8(jamaica_ref b, jamaica_int32 i, jamaica_int8 v);
void jamaicaGC_SetArray8_d0(jamaica_ref b, jamaica_int32 i, jamaica_int8 v);
void jamaicaGC_SetArray16(jamaica_ref b, jamaica_int32 i, jamaica_int16 v);
void jamaicaGC_SetArray16_d0(jamaica_ref b, jamaica_int32 i, jamaica_int16 v);
void jamaicaGC_SetArray32(jamaica_ref b, jamaica_int32 i, jamaica_int32 v);
void jamaicaGC_SetArray32_d0(jamaica_ref b, jamaica_int32 i, jamaica_int32 v);
void jamaicaGC_SetArray64(jamaica_ref b, jamaica_int32 i, jamaica_int64 v);
void jamaicaGC_SetArray64_d0(jamaica_ref b, jamaica_int32 i, jamaica_int64 v);
void jamaicaGC_SetArrayDouble(jamaica_ref b, jamaica_int32 i, jamaica_double v);
void jamaicaGC_SetArrayDouble_d0(jamaica_ref b, jamaica_int32 i, jamaica_double v);
void jamaicaGC_SetArrayFloat(jamaica_ref b, jamaica_int32 i, jamaica_float v);
void jamaicaGC_SetArrayFloat_d0(jamaica_ref b, jamaica_int32 i, jamaica_float v);
void jamaicaGC_SetArray32Ref(jamaica_ref b, jamaica_int32 i, jamaica_int32 v);
void jamaicaGC_SetArray32Ref_d0(jamaica_ref b, jamaica_int32 i, jamaica_int32 v);
void jamaicaGC_SetRefArray(jamaica_thread *ct, jamaica_ref b, jamaica_int32 i, jamaica_ref r);


#define JAMAICA_GET_REF_ARRAY_ELEMENTS_ADR(a) (&(JAMAICA_BLOCK_GET_DATA32(a,JAMAICA_ARRAY_ELEMENTS).r))
#define JAMAICA_GET_PRIMITIVE_ARRAY_ELEMENTS_ADR(a) ((jamaica_address) (&JAMAICA_BLOCK_GET_DATA32(a,JAMAICA_ARRAY_ELEMENTS)))
#define JAMAICA_GET_ARRAY8_ELEMENTS_ADR(a)    ((jamaica_int8 *) JAMAICA_GET_PRIMITIVE_ARRAY_ELEMENTS_ADR(a))
#define JAMAICA_GET_ARRAY16_ELEMENTS_ADR(a)   ((jamaica_int16*) JAMAICA_GET_PRIMITIVE_ARRAY_ELEMENTS_ADR(a))
#define JAMAICA_GET_ARRAY32_ELEMENTS_ADR(a)   ((jamaica_int32*) JAMAICA_GET_PRIMITIVE_ARRAY_ELEMENTS_ADR(a))
#define JAMAICA_GET_ARRAY64_ELEMENTS_ADR(a)   ((jamaica_int64*) JAMAICA_GET_PRIMITIVE_ARRAY_ELEMENTS_ADR(a))
#define JAMAICA_GET_ARRAY_LENGTH(b)            (jamaicaGC_GetArrayLength(b))
#define JAMAICA_GET_ARRAY_DEPTH(b)             (((jamaica_int32)(JAMAICA_BLOCK_GET_UI(b,JAMAICA_ARRAY_LENGTH_DEPTH) &  JAMAICA_ARRAY_DEPTH_MASK)))


//In the original Jamaica model, these used to first check JAMAICA_GET_ARRAY_DEPTH(b) == 0.
//If it did, then it would return the value of jamaicaGC_GetArrayXX_D0(b,ix), else jamaicaGC_GetArrayXX(b,ix)
//The ternary operator used was non-standard C and not supported by HLS, so this functionality is rolled
//into jamaicaGC_GetArrayXX
#define JAMAICA_GET_ARRAY8(b, ix, result)                   (result = jamaicaGC_GetArray8(b,ix))
#define JAMAICA_SET_ARRAY8(b, ix, v)                        jamaicaGC_SetArray8(b,ix,v)
#define JAMAICA_GET_ARRAY16(b,ix, result)                   (result = jamaicaGC_GetArray16(b,ix))
#define JAMAICA_SET_ARRAY16(b,ix, v)                        jamaicaGC_SetArray16(b,ix,v)
#define JAMAICA_GET_ARRAY32(b,ix, result)                   (result = jamaicaGC_GetArray32(b,ix))
#define JAMAICA_SET_ARRAY32(b,ix, v)                        jamaicaGC_SetArray32(b,ix,v)
#define JAMAICA_GET_ARRAY64(b,ix, result)                   (result = jamaicaGC_GetArray64(b,ix))
#define JAMAICA_SET_ARRAY64(b,ix, v)                        jamaicaGC_SetArray64(b,ix,v)
#define JAMAICA_GET_ARRAY_FLOAT(b,ix, result)               (result = jamaicaGC_GetArrayFloat(b,ix))
#define JAMAICA_SET_ARRAY_FLOAT(b,ix, v)                    jamaicaGC_SetArrayFloat(b,ix,v)
#define JAMAICA_GET_ARRAY_DOUBLE(b,ix, result)              (result = jamaicaGC_GetArrayDouble(b,ix))
#define JAMAICA_SET_ARRAY_DOUBLE(b,ix, v)                   jamaicaGC_SetArrayDouble(b,ix,v)
#define JAMAICA_GET_ARRAY32REF(b,ix,result)                 (result = jamaicaGC_GetArray32Ref(b,ix))
#define JAMAICA_SET_ARRAY32REF(b,ix,r)                      jamaicaGC_SetArray32Ref(b,ix,r)
#define JAMAICA_GET_REF_ARRAY(b,ix,result)                  (result = jamaicaGC_GetRefArray(b,ix))
#define JAMAICA_SET_REF_ARRAY(ct,b,ix,r)                    jamaicaGC_SetRefArray(ct,b,ix,r)
#define JAMAICA_SET_REF_ARRAY_TO_NULL(ct,b,ix)              jamaicaGC_SetRefArray(ct,b,ix,JAMAICA_NULL)

#define JAMAICA_GET_ARRAY8_D0(b, ix, result) JAMAICA_GET_ARRAY8(b, ix, result)
#define JAMAICA_SET_ARRAY8_D0(b, ix, v) JAMAICA_SET_ARRAY8(b, ix, v)
#define JAMAICA_GET_ARRAY16_D0(b,ix, result) JAMAICA_GET_ARRAY16(b,ix, result)
#define JAMAICA_SET_ARRAY16_D0(b,ix, v) JAMAICA_SET_ARRAY16(b,ix, v)
#define JAMAICA_GET_ARRAY32_D0(b,ix, result) JAMAICA_GET_ARRAY32(b,ix, result)
#define JAMAICA_SET_ARRAY32_D0(b,ix, v) JAMAICA_SET_ARRAY32(b,ix, v)
#define JAMAICA_GET_ARRAY64_D0(b,ix, result) JAMAICA_GET_ARRAY64(b,ix, result)
#define JAMAICA_SET_ARRAY64_D0(b,ix, v) JAMAICA_SET_ARRAY64(b,ix, v)
#define JAMAICA_GET_ARRAY_FLOAT_D0(b,ix, result) JAMAICA_GET_ARRAY_FLOAT(b,ix, result)
#define JAMAICA_SET_ARRAY_FLOAT_D0(b,ix, v) JAMAICA_SET_ARRAY_FLOAT(b,ix, v)
#define JAMAICA_GET_ARRAY_DOUBLE_D0(b,ix, result) JAMAICA_GET_ARRAY_DOUBLE(b,ix, result)
#define JAMAICA_SET_ARRAY_DOUBLE_D0(b,ix, v) JAMAICA_SET_ARRAY_DOUBLE(b,ix, v)
#define JAMAICA_SET_REF_ARRAY_D0(ct, b, ix, r) JAMAICA_SET_REF_ARRAY (ct, b, ix, r)
#define JAMAICA_GET_REF_ARRAY_D0(b, ix, result) JAMAICA_GET_REF_ARRAY (b, ix, result)


//Other functions
jamaica_ref jamaicaInterpreter_allocJavaObject(jamaica_thread *ct,jamaica_ref cl);
jamaica_ref jamaicaInterpreter_allocSimpleArray(jamaica_thread *ct,jamaica_int32 sz, jamaica_ref cl);
jamaica_ref jamaicaInterpreter_allocMultiArray(jamaica_thread *ct,jamaica_int32 *s,jamaica_int32 first_dim,jamaica_int32 dimensions, jamaica_ref cl);
jamaica_int32 jamaicaInterpreter_initialize_class_helper(jamaica_thread *ct, jamaica_ref clazz, jamaica_int32  startpc);
jamaica_int32 jamaicaInterpreter_castDoubleToInteger(jamaica_double d);
jamaica_int64 jamaicaInterpreter_castDoubleToLong(jamaica_double d);
void jamaicaScheduler_syncPointFull(jamaica_thread *ct);
jamaica_ref jamaicaGC_PlainAllocHeadBlock(jamaica_thread *ct, jamaica_uint32 refs);
void jamaicaInterpreter_enterMonitor(jamaica_thread *ct, jamaica_ref obj);
void jamaicaInterpreter_exitMonitor(jamaica_thread *ct, jamaica_ref obj);
jamaica_ref jamaicaInterpreter_getInterfaceMethod(jamaica_thread *ct, jamaica_ref target, jamaica_ref method);


//Exceptions
void jamaica_throw_class(jamaica_thread *ct, jamaica_ref clazz, jamaica_ref msg);
void jamaica_throwNullPtrExc(jamaica_thread *ct);
void jamaica_throwIncompClassChangeErr(jamaica_thread *ct);
void jamaica_throwAbstrMethodErr(jamaica_thread *ct);
void jamaica_throwClassCastExc(jamaica_thread *ct);
void jamaica_throwArrIdxOutOfBndsExc(jamaica_thread *ct);
void jamaica_throwArrIdxOutOfBndsExcMsg(jamaica_thread *ct, jamaica_ref msg);
void jamaica_throwOutOfMemErr(jamaica_thread *ct);
void jamaica_throwNegArrSzExc(jamaica_thread *ct);
void jamaica_throwArithmExc(jamaica_thread *ct);
void jamaica_throwIllMonitorStateExc(jamaica_thread *ct);
void jamaica_throwArrStoreExc(jamaica_thread *ct);
void jamaica_throwNoClassDefFndErr(jamaica_thread *ct);
void jamaica_throwInterruptedExc(jamaica_thread *ct);
void jamaica_throwInternalErr(jamaica_thread *ct);
void jamaica_throwInternalErrMsg(jamaica_thread *ct, jamaica_ref msg);
void jamaica_throwInternalErrcmsg(jamaica_thread *ct, const char *msg);
void jamaica_throwIllArgExccmsg(jamaica_thread *ct, const char *msg);
void jamaica_throwStringIdxOutOfBndsExc(jamaica_thread *ct, jamaica_int32 index, jamaica_int32 lowerBound, jamaica_int32  upperBound);
void jamaica_throwIllAssgmtErr(jamaica_thread *ct);
void jamaica_throwStackOvrflwErr(jamaica_thread *ct);
void jamaicaExceptions_throw(jamaica_thread *ct, jamaica_ref exception);
void jamaica_clearRefsOnExc(jamaica_thread *ct, jamaica_int32 tp);
void jamaica_propagate_exception(jamaica_thread *ct);

#define JAMAICA_NATIVE_ON_LONGJUMP(jmp) 0
#define JAMAICA_NATIVE_LONGJUMP(jmp) do {} while(0)
#define JAMAICA_LONG_JUMP_BUF_TO_INDEX(ct,longJumpBuffer) ((jamaica_int32) 0)

//Macros to hide unused variable warnings
#define JAMAICA_VARIABLE_UNUSED(name) do {(void)(name);} while (0)
#define JAMAICA_VALUE_UNUSED(name) do {(void)(name);} while (0)


//Check for and handle stack overflows
INLINE_FUNCTION jamaica_int32 jamaicaThreads_remainingCStack(jamaica_thread *ct);
INLINE_FUNCTION jamaica_bool jamaicaThreads_checkCStackOverflow(jamaica_thread *ct);
#define JAMAICA_C_STACK_OVERFLOW(ct,action) \
  do { \
    if (jamaicaThreads_checkCStackOverflow(ct)) \
      { \
        action \
      } \
  } while (0)


#include "jamaica_structures.h"
#include <fpgaporting.h>


#endif
