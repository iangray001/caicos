/*
 * Jamaica arithmetic as it is implemented on the FPGA. Most of this is identical to the standard target
 * because HLS can handle most normal C operators.
 *
 * This header should only be included from jamaica.h
 */

#define JAMAICA_NATIVE_MATH_INT_INT32_CONST_MAX  2147483647
#define JAMAICA_NATIVE_MATH_INT_INT32_CONST_MIN  (-JAMAICA_INT32_CONST_MAX-1)
#define JAMAICA_NATIVE_MATH_INT_UINT32_CONST_MAX 0xFFFFffff
#define JAMAICA_NATIVE_MATH_INT_UINT32_CONST_MIN 0
#define JAMAICA_NATIVE_MATH_INT_INT32_CONST_0X7FC00000 0x7FC00000
#define JAMAICA_NATIVE_MATH_INT_INT32_CONST_0X7F800000 0x7F800000
#define JAMAICA_NATIVE_MATH_INT_INT32_CONST_0XFF800000 0xFF800000


#ifndef JAMAICA_NATIVE_MATH_INT_INT32_CONST_NAN
  #define JAMAICA_NATIVE_MATH_INT_INT32_CONST_NAN     JAMAICA_NATIVE_MATH_INT_INT32_CONST_0X7FC00000
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT32_CONST_POS_INF
  #define JAMAICA_NATIVE_MATH_INT_INT32_CONST_POS_INF JAMAICA_NATIVE_MATH_INT_INT32_CONST_0X7F800000
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT32_CONST_NEG_INF
  #define JAMAICA_NATIVE_MATH_INT_INT32_CONST_NEG_INF JAMAICA_NATIVE_MATH_INT_INT32_CONST_0XFF800000
#endif
/* create int64 constant with correct suffix.
   Note: some older Windows compilers only support i64 suffix.
*/
#ifdef HAVE_LONGLONG_SUFFIX_I64
  #define JAMAICA_NATIVE_MATH_INT64_CONST(n) n ## i64
  #define JAMAICA_NATIVE_MATH_UINT64_CONST(n) n ## i64
#else
  #define JAMAICA_NATIVE_MATH_INT64_CONST(n) n ## LL
  #define JAMAICA_NATIVE_MATH_UINT64_CONST(n) n ## LL
#endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_0
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_0                  0LL /*!*/
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_1
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_1                  1LL /*!*/
  #endif
  #ifndef  JAMAICA_NATIVE_MATH_INT_INT64_CONST_MINUS_1
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_MINUS_1            -1LL /*!*/
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_1000
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_1000               1000LL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_3600
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_3600               3600LL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_1000000
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_1000000            1000000LL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_1000000000
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_1000000000         1000000000LL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_INT32_MAX
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_INT32_MAX          2147483647LL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_INT32_MIN
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_INT32_MIN          (-JAMAICA_NATIVE_MATH_INT_INT64_CONST_INT32_MAX-1LL)
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_MAX
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_MAX                9223372036854775807LL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_MIN
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_MIN                (-JAMAICA_NATIVE_MATH_INT_INT64_CONST_MAX-1LL)
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x00000000000003E8
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x00000000000003E8 0x00000000000003E8LL  /* == 1000 */
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x00000000000007FF
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x00000000000007FF 0x00000000000007FFLL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x0000000010000000
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x0000000010000000 0x0000000010000000LL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x0010000000000000
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x0010000000000000 0x0010000000000000LL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x000fFFFFffffFFFF
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x000fFFFFffffFFFF 0x000fFFFFffffFFFFLL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x7ff0000000000000
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x7ff0000000000000 0x7ff0000000000000LL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_0xfff0000000000000
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_0xfff0000000000000 0xfff0000000000000LL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x7ff8000000000000
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x7ff8000000000000 0x7ff8000000000000LL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_0xc3e0000000000000
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_0xc3e0000000000000 0xc3e0000000000000LL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_0xffffFFFFffffFFFF
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_0xffffFFFFffffFFFF 0xffffFFFFffffFFFFLL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_0xffffFFFF00000000
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_0xffffFFFF00000000 0xffffFFFF00000000LL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x00000000ffffFFFF
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x00000000ffffFFFF 0x00000000ffffFFFFLL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x0123456789ABCDEF
    #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x0123456789ABCDEF 0x0123456789ABCDEFLL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_UINT64_CONST_0
    #define JAMAICA_NATIVE_MATH_INT_UINT64_CONST_0                 0LL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_UINT64_CONST_1
    #define JAMAICA_NATIVE_MATH_INT_UINT64_CONST_1                 1LL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_UINT64_CONST_MAX
    #define JAMAICA_NATIVE_MATH_INT_UINT64_CONST_MAX               18446744073709551615ULL
  #endif
  #ifndef JAMAICA_NATIVE_MATH_INT_UINT64_CONST_MIN
    #define JAMAICA_NATIVE_MATH_INT_UINT64_CONST_MIN               0
  #endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_NAN
  #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_NAN     JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x7ff8000000000000
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_POS_INF
  #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_POS_INF JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x7ff0000000000000
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_CONST_NEG_INF
  #define JAMAICA_NATIVE_MATH_INT_INT64_CONST_NEG_INF JAMAICA_NATIVE_MATH_INT_INT64_CONST_0xfff0000000000000
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_ADD
  #define JAMAICA_NATIVE_MATH_INT_INT64_ADD(v1,v2) ((v1)+(v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_SUB
  #define JAMAICA_NATIVE_MATH_INT_INT64_SUB(v1,v2) ((v1)-(v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_MUL
  #define JAMAICA_NATIVE_MATH_INT_INT64_MUL(v1,v2) ((v1)*(v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_DIV
  #define JAMAICA_NATIVE_MATH_INT_INT64_DIV(v1,v2) ((v1)/(v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_MOD
  #define JAMAICA_NATIVE_MATH_INT_INT64_MOD(v1,v2) ((v1)%(v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT64_ADD
  #define JAMAICA_NATIVE_MATH_INT_UINT64_ADD(v1,v2) ((v1)+(v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT64_SUB
  #define JAMAICA_NATIVE_MATH_INT_UINT64_SUB(v1,v2) ((v1)-(v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT64_MUL
  #define JAMAICA_NATIVE_MATH_INT_UINT64_MUL(v1,v2) ((v1)*(v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT64_DIV
  #define JAMAICA_NATIVE_MATH_INT_UINT64_DIV(v1,v2) ((v1)/(v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT64_MOD
  #define JAMAICA_NATIVE_MATH_INT_UINT64_MOD(v1,v2) ((v1)%(v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_AND
  #define JAMAICA_NATIVE_MATH_INT_INT64_AND(v1,v2) ((v1)&(v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_OR
  #define JAMAICA_NATIVE_MATH_INT_INT64_OR(v1,v2)  ((v1)|(v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_XOR
  #define JAMAICA_NATIVE_MATH_INT_INT64_XOR(v1,v2) ((v1)^(v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT64_AND
  #define JAMAICA_NATIVE_MATH_INT_UINT64_AND(v1,v2) ((v1)&(v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT64_OR
  #define JAMAICA_NATIVE_MATH_INT_UINT64_OR(v1,v2)  ((v1)|(v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT64_XOR
  #define JAMAICA_NATIVE_MATH_INT_UINT64_XOR(v1,v2) ((v1)^(v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_SHIFTL
  #define JAMAICA_NATIVE_MATH_INT_INT64_SHIFTL(v,l)  ((v)<<(l))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_SHIFTR
  #define JAMAICA_NATIVE_MATH_INT_INT64_SHIFTR(v,l)  (((v)>>(l)) |  (((v) >= 0 || (l) == 0) ? 0 : (JAMAICA_NATIVE_MATH_INT_INT64_CONST_0xffffFFFFffffFFFF << (64-(l)))))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT64_SHIFTR
  #define JAMAICA_NATIVE_MATH_INT_UINT64_SHIFTR(v,l) (((v)>>(l)) & ~(((v) >= 0 || (l) == 0) ? 0 : (JAMAICA_NATIVE_MATH_INT_INT64_CONST_0xffffFFFFffffFFFF << (64-(l)))))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_NEG
  #define JAMAICA_NATIVE_MATH_INT_INT64_NEG(v) (-(v))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_INC
  #define JAMAICA_NATIVE_MATH_INT_INT64_INC(v) { v++; }
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_DEC
  #define JAMAICA_NATIVE_MATH_INT_INT64_DEC(v) { v--; }
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT64_INC
  #define JAMAICA_NATIVE_MATH_INT_UINT64_INC(v) { v++; }
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT64_DEC
  #define JAMAICA_NATIVE_MATH_INT_UINT64_DEC(v) { v--; }
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_EQ
  #define JAMAICA_NATIVE_MATH_INT_INT64_EQ(v1,v2) ((v1) == (v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_NE
  #define JAMAICA_NATIVE_MATH_INT_INT64_NE(v1,v2) ((v1) != (v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_LT
  #define JAMAICA_NATIVE_MATH_INT_INT64_LT(v1,v2) ((v1) <  (v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_LE
  #define JAMAICA_NATIVE_MATH_INT_INT64_LE(v1,v2) ((v1) <= (v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_GT
  #define JAMAICA_NATIVE_MATH_INT_INT64_GT(v1,v2) ((v1) >  (v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_GE
  #define JAMAICA_NATIVE_MATH_INT_INT64_GE(v1,v2) ((v1) >= (v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT64_EQ
  #define JAMAICA_NATIVE_MATH_INT_UINT64_EQ(v1,v2) ((v1) == (v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT64_NE
  #define JAMAICA_NATIVE_MATH_INT_UINT64_NE(v1,v2) ((v1) != (v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT64_LT
  #define JAMAICA_NATIVE_MATH_INT_UINT64_LT(v1,v2) ((v1) <  (v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT64_LE
  #define JAMAICA_NATIVE_MATH_INT_UINT64_LE(v1,v2) ((v1) <= (v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT64_GT
  #define JAMAICA_NATIVE_MATH_INT_UINT64_GT(v1,v2) ((v1) >  (v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT64_GE
  #define JAMAICA_NATIVE_MATH_INT_UINT64_GE(v1,v2) ((v1) >= (v2))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT32_TO_INT64
  #define JAMAICA_NATIVE_MATH_INT_INT32_TO_INT64(v)   ((jamaica_int64)(v))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT32_TO_UINT64
  #define JAMAICA_NATIVE_MATH_INT_UINT32_TO_UINT64(v) ((jamaica_int64)(v))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_TO_INT32
  #define JAMAICA_NATIVE_MATH_INT_INT64_TO_INT32(v)   ((jamaica_int32)(v))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT64_TO_UINT32
  #define JAMAICA_NATIVE_MATH_INT_UINT64_TO_UINT32(v) ((jamaica_int32)(v))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_TO_DOUBLE
  #define JAMAICA_NATIVE_MATH_INT_INT64_TO_DOUBLE(v)  ((jamaica_double)(v))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_TO_UINT64
  #define JAMAICA_NATIVE_MATH_INT_INT64_TO_UINT64(v)  ((jamaica_int64)(v))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT64_TO_INT64
  #define JAMAICA_NATIVE_MATH_INT_UINT64_TO_INT64(v)  ((jamaica_int64)(v))
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_TO_POINTER
  #if   SIZEOF_VOID_P == 4
    #define JAMAICA_NATIVE_MATH_INT_INT64_TO_POINTER(v)  ((void*)((jamaica_int32)(v)))
  #elif SIZEOF_VOID_P == 8
    #define JAMAICA_NATIVE_MATH_INT_INT64_TO_POINTER(v)  ((void*)(v))
  #else /* SIZEOF_VOID_P == ... */
    #ifndef JAMAICA_WERROR
      #error "Unsupported pointer size!"
    #endif
  #endif /* SIZEOF_VOID_P == ... */
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_POINTER_TO_INT64
  #if   SIZEOF_VOID_P == 4
    #define JAMAICA_NATIVE_MATH_INT_POINTER_TO_INT64(v)  ((jamaica_int64)((jamaica_int32)(v)))
  #elif SIZEOF_VOID_P == 8
    #define JAMAICA_NATIVE_MATH_INT_POINTER_TO_INT64(v)  ((jamaica_int64)(v))
  #else /* SIZEOF_VOID_P == ... */
    #ifndef JAMAICA_WERROR
      #error "Unsupported pointer size!"
    #endif
  #endif /* SIZEOF_VOID_P == ... */
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT32_LOW_HIGH_TO_INT64
  #define JAMAICA_NATIVE_MATH_INT_INT32_LOW_HIGH_TO_INT64(low,high,v) \
    do \
    { \
      (v)=((((jamaica_int64)(high)) << 32) | ((((jamaica_int64)(low)) <<  0) & JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x00000000ffffFFFF)); \
    } \
    while (0)
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT32_LOW_HIGH_TO_UINT64
  #define JAMAICA_NATIVE_MATH_INT_UINT32_LOW_HIGH_TO_UINT64(low,high,v) \
    do \
    { \
      (v)=((((jamaica_int64)(high)) << 32) | ((((jamaica_int64)(low)) <<  0) & JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x00000000ffffFFFF)); \
    } \
    while (0)
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_INT64_TO_INT32_LOW_HIGH
  #define JAMAICA_NATIVE_MATH_INT_INT64_TO_INT32_LOW_HIGH(v,low,high) \
    do \
    { \
      (high)=(jamaica_int32)(((v) & JAMAICA_NATIVE_MATH_INT_INT64_CONST_0xffffFFFF00000000) >> 32); \
      (low) =(jamaica_int32)(((v) & JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x00000000ffffFFFF) >>  0); \
    } \
    while (0)
#endif
#ifndef JAMAICA_NATIVE_MATH_INT_UINT64_TO_UINT32_LOW_HIGH
  #define JAMAICA_NATIVE_MATH_INT_UINT64_TO_UINT32_LOW_HIGH(v,low,high) \
    do \
    { \
      (high)=(jamaica_int32)(((v) & JAMAICA_NATIVE_MATH_INT_INT64_CONST_0xffffFFFF00000000) >> 32); \
      (low) =(jamaica_int32)(((v) & JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x00000000ffffFFFF) >>  0); \
    } \
    while (0)
#endif
#ifndef JAMAICA_NATIVE_MATH_FLOAT_FLOAT_ISNAN
  #if HAVE_ISNAN
    #include <math.h>
    #define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_ISNAN(f) isnan(f)
  #else
    #error Unsupported floating point opperation isnan()
  #endif
#endif
#ifndef JAMAICA_NATIVE_MATH_FLOAT_FLOAT_ISINF
  #if HAVE_ISINF
    #include <math.h>
    #define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_ISINF(f) (isinf(f) != 0)
  #else
    #error Unsupported floating point opperation isinf()
  #endif
#endif
#ifndef JAMAICA_NATIVE_MATH_FLOAT_FLOAT_POS_ISINF
  #if HAVE_ISINF
    #include <math.h>
    #define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_POS_ISINF(f) (isinf(f) > 0)
  #else
    #error Unsupported floating point opperation isinf()
  #endif
#endif
#ifndef JAMAICA_NATIVE_MATH_FLOAT_FLOAT_NEG_ISINF
  #if HAVE_ISINF
    #include <math.h>
    #define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_NEG_ISINF(f) (isinf(f) < 0)
  #else
    #error Unsupported floating point opperation isinf()
  #endif
#endif
#ifndef JAMAICA_NATIVE_MATH_FLOAT_FLOAT_FINITE
  #if HAVE_FINITE
    #include <math.h>
    #define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_FINITE(f) finite(f)
  #else
    #if HAVE_ISFINITE
      #include <math.h>
      #define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_FINITE(f) isfinite(f)
    #else
      #error Unsupported floating point opperation finite()/isfinite()
    #endif
  #endif
#endif
#ifndef JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_ISNAN
  #if HAVE_ISNAN
    #include <math.h>
    #define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_ISNAN(d) isnan(d)
  #else
    #error Unsupported floating point opperation isnan()
  #endif
#endif
#ifndef JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_ISINF
  #if HAVE_ISINF
    #include <math.h>
    #define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_ISINF(d) (isinf(d) != 0)
  #else
    #error Unsupported floating point opperation isinf()
  #endif
#endif
#ifndef JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_POS_ISINF
  #if HAVE_ISINF
    #include <math.h>
    #define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_POS_ISINF(d) (isinf(d) > 0)
  #else
    #error Unsupported floating point opperation isinf()
  #endif
#endif
#ifndef JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_NEG_ISINF
  #if HAVE_ISINF
    #include <math.h>
    #define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_NEG_ISINF(d) (isinf(d) < 0)
  #else
    #error Unsupported floating point opperation isinf()
  #endif
#endif
#ifndef JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_FINITE
  #if HAVE_FINITE
    #include <math.h>
    #define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_FINITE(d) finite(d)
  #else
    #if HAVE_ISFINITE
      #include <math.h>
      #define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_FINITE(d) isfinite(d)
    #else
      #error Unsupported floating point opperation finite()/isfinite()
    #endif
  #endif
#endif


#define JAMAICA_INT32_CONST_MAX JAMAICA_NATIVE_MATH_INT_INT32_CONST_MAX
#define JAMAICA_INT32_CONST_MIN JAMAICA_NATIVE_MATH_INT_INT32_CONST_MIN
#define JAMAICA_INT32_CONST_NAN     JAMAICA_NATIVE_MATH_INT_INT32_CONST_NAN
#define JAMAICA_INT32_CONST_POS_INF JAMAICA_NATIVE_MATH_INT_INT32_CONST_POS_INF
#define JAMAICA_INT32_CONST_NEG_INF JAMAICA_NATIVE_MATH_INT_INT32_CONST_NEG_INF
#define JAMAICA_INT64_CONST_0                  JAMAICA_NATIVE_MATH_INT_INT64_CONST_0
#define JAMAICA_INT64_CONST_1                  JAMAICA_NATIVE_MATH_INT_INT64_CONST_1
#define JAMAICA_INT64_CONST_MINUS_1            JAMAICA_NATIVE_MATH_INT_INT64_CONST_MINUS_1
#define JAMAICA_INT64_CONST_1000               JAMAICA_NATIVE_MATH_INT_INT64_CONST_1000
#define JAMAICA_INT64_CONST_3600               JAMAICA_NATIVE_MATH_INT_INT64_CONST_3600
#define JAMAICA_INT64_CONST_1000000            JAMAICA_NATIVE_MATH_INT_INT64_CONST_1000000
#define JAMAICA_INT64_CONST_1000000000         JAMAICA_NATIVE_MATH_INT_INT64_CONST_1000000000
#define JAMAICA_INT64_CONST_INT32_MAX          JAMAICA_NATIVE_MATH_INT_INT64_CONST_INT32_MAX
#define JAMAICA_INT64_CONST_INT32_MIN          JAMAICA_NATIVE_MATH_INT_INT64_CONST_INT32_MIN
#define JAMAICA_INT64_CONST_MAX                JAMAICA_NATIVE_MATH_INT_INT64_CONST_MAX
#define JAMAICA_INT64_CONST_MIN                JAMAICA_NATIVE_MATH_INT_INT64_CONST_MIN
#define JAMAICA_INT64_CONST_0x00000000000003E8 JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x00000000000003E8
#define JAMAICA_INT64_CONST_0x00000000000007FF JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x00000000000007FF
#define JAMAICA_INT64_CONST_0x0000000010000000 JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x0000000010000000
#define JAMAICA_INT64_CONST_0x0010000000000000 JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x0010000000000000
#define JAMAICA_INT64_CONST_0x000fFFFFffffFFFF JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x000fFFFFffffFFFF
#define JAMAICA_INT64_CONST_0x7ff0000000000000 JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x7ff0000000000000
#define JAMAICA_INT64_CONST_0xfff0000000000000 JAMAICA_NATIVE_MATH_INT_INT64_CONST_0xfff0000000000000
#define JAMAICA_INT64_CONST_0x7ff8000000000000 JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x7ff8000000000000
#define JAMAICA_INT64_CONST_0xc3e0000000000000 JAMAICA_NATIVE_MATH_INT_INT64_CONST_0xc3e0000000000000
#define JAMAICA_INT64_CONST_0xffffFFFFffffFFFF JAMAICA_NATIVE_MATH_INT_INT64_CONST_0xffffFFFFffffFFFF
#define JAMAICA_INT64_CONST_0xffffFFFF00000000 JAMAICA_NATIVE_MATH_INT_INT64_CONST_0xffffFFFF00000000
#define JAMAICA_INT64_CONST_0x00000000ffffFFFF JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x00000000ffffFFFF
#define JAMAICA_UINT64_CONST_0                 JAMAICA_NATIVE_MATH_INT_UINT64_CONST_0
#define JAMAICA_UINT64_CONST_1                 JAMAICA_NATIVE_MATH_INT_UINT64_CONST_1
#define JAMAICA_INT64_CONST_NAN                JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x7ff8000000000000
#define JAMAICA_INT64_CONST_POS_INF            JAMAICA_NATIVE_MATH_INT_INT64_CONST_0x7ff0000000000000
#define JAMAICA_INT64_CONST_NEG_INF            JAMAICA_NATIVE_MATH_INT_INT64_CONST_0xfff0000000000000
#define JAMAICA_FLOAT_CONST_NAN     jamaicaMath_float_const_NaN()
#define JAMAICA_FLOAT_CONST_POS_INF jamaicaMath_float_const_Pos_Inf()
#define JAMAICA_FLOAT_CONST_NEG_INF jamaicaMath_float_const_Neg_Inf()
#define JAMAICA_DOUBLE_CONST_NAN     jamaicaMath_double_const_NaN()
#define JAMAICA_DOUBLE_CONST_POS_INF jamaicaMath_double_const_Pos_Inf()
#define JAMAICA_DOUBLE_CONST_NEG_INF jamaicaMath_double_const_Neg_Inf()
extern const jamaica_int32 jamaicaMath_const0;
#define JAMAICA_MATH_GCC_BUG_CONST0 0
#define JAMAICA_ADDS32(v1,v2) (((jamaica_int32)(((jamaica_uint32)(v1))+((jamaica_uint32)(v2)))) - JAMAICA_MATH_GCC_BUG_CONST0)
#define JAMAICA_SUBS32(v1,v2) (((jamaica_int32)(((jamaica_uint32)(v1))-((jamaica_uint32)(v2)))) - JAMAICA_MATH_GCC_BUG_CONST0)
#define JAMAICA_MULS32(v1,v2) (((jamaica_int32)(((jamaica_uint32)(v1))*((jamaica_uint32)(v2)))) - JAMAICA_MATH_GCC_BUG_CONST0)
#define JAMAICA_DIVS32(v1,v2) (((v2) == -1) ? -(v1) : ((v1)/(v2)))
#define JAMAICA_MODS32(v1,v2) (((v2) == -1) ? 0     : ((v1)%(v2)))
#define JAMAICA_ADDS64(v1,v2) (((jamaica_int64)(((jamaica_uint64)(v1))+((jamaica_uint64)(v2)))) - JAMAICA_MATH_GCC_BUG_CONST0)
#define JAMAICA_ADDU64(v1,v2) ((v1)+(v2))
#define JAMAICA_SUBS64(v1,v2) (((jamaica_int64)(((jamaica_uint64)(v1))-((jamaica_uint64)(v2)))) - JAMAICA_MATH_GCC_BUG_CONST0)
#define JAMAICA_SUBU64(v1,v2) ((v1)-(v2))
#define JAMAICA_MULS64(v1,v2) (((jamaica_int64)(((jamaica_uint64)(v1))*((jamaica_uint64)(v2)))) - JAMAICA_MATH_GCC_BUG_CONST0)
#define JAMAICA_MULU64(v1,v2) ((v1)*(v2))
#define JAMAICA_DIVS64(v1,v2) (((v2) == -1) ? -(v1) : ((v1)/(v2)))
#define JAMAICA_DIVU64(v1,v2) ((v1)/(v2))
#define JAMAICA_MODS64(v1,v2) (((v2) == -1) ? 0     : ((v1)%(v2)))
#define JAMAICA_MODU64(v1,v2) ((v1)%(v2))
#define JAMAICA_ANDS64(v1,v2) ((v1)&(v2))
#define JAMAICA_ANDU64(v1,v2) ((v1)&(v2))
#define JAMAICA_ORS64(v1,v2)  ((v1)|(v2))
#define JAMAICA_ORU64(v1,v2)  ((v1)|(v2))
#define JAMAICA_XORS64(v1,v2) ((v1)^(v2))
#define JAMAICA_XORU64(v1,v2) ((v1)^(v2))
#define JAMAICA_SHIFTL_S64(v,l)  ((v)<<(l))
#define JAMAICA_SHIFTR_S64(v,l)  ((jamaica_int64)  v)>>(l)
#define JAMAICA_USHIFTR_S64(v,l) ((jamaica_uint64) v)>>(l)
#define JAMAICA_NEG_S64(v) (-(v))
#define JAMAICA_INCU64(v) { v++; }
#define JAMAICA_DECU64(v) { v--; }
#define JAMAICA_EQ_S64(v1,v2) ((v1) == (v2))
#define JAMAICA_NE_S64(v1,v2) ((v1) != (v2))
#define JAMAICA_LT_S64(v1,v2) ((v1) <  (v2))
#define JAMAICA_LE_S64(v1,v2) ((v1) <= (v2))
#define JAMAICA_GT_S64(v1,v2) ((v1) >  (v2))
#define JAMAICA_GE_S64(v1,v2) ((v1) >= (v2))
#define JAMAICA_EQ_U64(v1,v2) ((v1) == (v2))
#define JAMAICA_NE_U64(v1,v2) ((v1) != (v2))
#define JAMAICA_LT_U64(v1,v2) ((v1) <  (v2))
#define JAMAICA_LE_U64(v1,v2) ((v1) <= (v2))
#define JAMAICA_GT_U64(v1,v2) ((v1) >  (v2))
#define JAMAICA_GE_U64(v1,v2) ((v1) >= (v2))
#define JAMAICA_INT32_TO_INT64(v)   JAMAICA_NATIVE_MATH_INT_INT32_TO_INT64(v)
#define JAMAICA_INT64_TO_INT32(v)   JAMAICA_NATIVE_MATH_INT_INT64_TO_INT32(v)
#define JAMAICA_UINT32_TO_UINT64(v) JAMAICA_NATIVE_MATH_INT_UINT32_TO_UINT64(v)
#define JAMAICA_UINT64_TO_UINT32(v) JAMAICA_NATIVE_MATH_INT_UINT64_TO_UINT32(v)
#define JAMAICA_INT64_TO_UINT64(v)  ((jamaica_uint64)(v))
#define JAMAICA_UINT64_TO_INT64(v)  ((jamaica_int64)(v))

//Wrappers for math.h from native methods
#define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_LOG(d) (log(d))
#define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_MUL(f0,f1) ((f0)*(f1))
#define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_DIV(f0,f1) ((f0)/(f1))
#define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_MOD(f0,f1) ((jamaica_float)fmod((jamaica_double)(f0),(jamaica_double)(f1)))
#define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_DIV(d0,d1) ((d0)/(d1))
#define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_MUL(d0,d1) ((d0)*(d1))
#define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_MOD(d0,d1) fmod(d0,d1)
#define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_SIN(f) (sinf(f))
#define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_COS(f) (cosf(f))
#define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_TAN(f) (tanf(f))
#define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_ASIN(f) (asinf(f))
#define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_ACOS(f) (acosf(f))
#define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_ATAN(f) (atanf(f))
#define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_ATAN2(f0,f1) (atan2f(f0,f1))
#define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_SIN(d) (sin(d))
#define JAMAICA_NATIVE_MATH_DOUBLE_SINH(d) (sinh(d))
#define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_COS(d) (cos(d))
#define JAMAICA_NATIVE_MATH_DOUBLE_COSH(d) (cosh(d))
#define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_TAN(d) (tan(d))
#define JAMAICA_NATIVE_MATH_DOUBLE_TANH(d) (tanh(d))
#define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_ASIN(d) (asin(d))
#define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_ACOS(d) (acos(d))
#define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_ATAN(d) (atan(d))
#define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_ATAN2(d0,d1) (atan2(d0,d1))
#define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_ABS(f) (fabsf(f))
#define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_FLOOR(f) (floorf(f))
#define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_CEIL(f) (ceilf(f))
#define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_SQRT(f) (sqrtf(f))
#define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_POW(f0,f1) (powf(f0,f1))
#define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_LOG(f) (logf(f))
#define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_EXP(f) (expf(f))
#define JAMAICA_NATIVE_MATH_FLOAT_FLOAT_RINT(f) (rintf(f))
#define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_ABS(d) (fabs(d))
#define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_FLOOR(d) (floor(d))
#define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_CEIL(d) (ceil(d))
#define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_SQRT(d) (sqrt(d))
#define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_POW(d0,d1) (pow(d0,d1))
#define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_LOG(d) (log(d))
#define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_EXP(d) (exp(d))
#define JAMAICA_NATIVE_MATH_FLOAT_DOUBLE_RINT(d) (rint(d))

//Native casts
#define JAMAICA_CAST_DOUBLE_TO_INTEGER(d) jamaicaInterpreter_castDoubleToInteger(d)
#define JAMAICA_CAST_DOUBLE_TO_LONG(d) jamaicaInterpreter_castDoubleToLong(d)
