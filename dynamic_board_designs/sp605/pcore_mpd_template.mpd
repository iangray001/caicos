## ==============================================================
## File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
## Version: 2014.1
## Copyright (C) 2014 Xilinx Inc. All rights reserved.
## 
## ==============================================================


BEGIN hls

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VERILOG
OPTION ARCH_SUPPORT_MAP = (spartan6=DEVELOPMENT)
OPTION IP_GROUP = MICROBLAZE:PPC:USER
OPTION DESC = hls

# OPTION STYLE = MIX
# OPTION RUN_NGCBUILD = TRUE

PORT ap_clk = "", DIR = I, SIGIS = Clk, BUS = M_AXI_GMEM32:S_AXI_AXILITES, ASSIGNMENT = REQUIRE
PORT ap_rst_n = ARESETN, DIR = I, SIGIS = Rst, BUS = M_AXI_GMEM32:S_AXI_AXILITES, ASSIGNMENT = REQUIRE

## AXI4 Master
BUS_INTERFACE BUS = M_AXI_GMEM32, BUS_STD = AXI, BUS_TYPE = MASTER

# Generics
# Xilinx stuff. This seems to be required
PARAMETER C_M_AXI_GMEM32_SUPPORTS_THREADS = 0, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_GMEM32
PARAMETER C_M_AXI_GMEM32_PROTOCOL = AXI4, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_GMEM32
PARAMETER C_M_AXI_GMEM32_SUPPORTS_READ = 1, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_GMEM32
PARAMETER C_M_AXI_GMEM32_SUPPORTS_WRITE = 1, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_GMEM32
PARAMETER C_M_AXI_GMEM32_SUPPORTS_USER_SIGNALS = 0, DT = integer, RANGE = (0, 1), TYPE = NON_HDL, BUS = M_AXI_GMEM32
PARAMETER C_M_AXI_GMEM32_SUPPORTS_NARROW_BURST = 0, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_GMEM32

PARAMETER C_M_AXI_GMEM32_ID_WIDTH = 1, DT = integer, BUS = M_AXI_GMEM32
PARAMETER C_M_AXI_GMEM32_ADDR_WIDTH = 32, DT = integer, BUS = M_AXI_GMEM32, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_GMEM32_DATA_WIDTH = 32, DT = integer, BUS = M_AXI_GMEM32, RANGE = (32, 64, 128, 256)
PARAMETER C_M_AXI_GMEM32_AWUSER_WIDTH = 1, DT = integer, BUS = M_AXI_GMEM32, ISVALID = (C_M_AXI_GMEM32_SUPPORTS_USER_SIGNALS == 1)
PARAMETER C_M_AXI_GMEM32_ARUSER_WIDTH = 1, DT = integer, BUS = M_AXI_GMEM32, ISVALID = (C_M_AXI_GMEM32_SUPPORTS_USER_SIGNALS == 1)
PARAMETER C_M_AXI_GMEM32_WUSER_WIDTH = 1, DT = integer, BUS = M_AXI_GMEM32, ISVALID = (C_M_AXI_GMEM32_SUPPORTS_USER_SIGNALS == 1)
PARAMETER C_M_AXI_GMEM32_RUSER_WIDTH = 1, DT = integer, BUS = M_AXI_GMEM32, ISVALID = (C_M_AXI_GMEM32_SUPPORTS_USER_SIGNALS == 1)
PARAMETER C_M_AXI_GMEM32_BUSER_WIDTH = 1, DT = integer, BUS = M_AXI_GMEM32, ISVALID = (C_M_AXI_GMEM32_SUPPORTS_USER_SIGNALS == 1)
PARAMETER C_M_AXI_GMEM32_USER_VALUE = 0b0000, DT = std_logic_vector, BUS = M_AXI_GMEM32, ISVALID = (C_M_AXI_GMEM32_SUPPORTS_USER_SIGNALS == 1)
PARAMETER C_M_AXI_GMEM32_PROT_VALUE = 0b000, DT = std_logic_vector, BUS = M_AXI_GMEM32
PARAMETER C_M_AXI_GMEM32_CACHE_VALUE = 0b0011, DT = std_logic_vector, BUS = M_AXI_GMEM32

# Ports
PORT m_axi_gmem32_AWID = AWID, BUS = M_AXI_GMEM32, DIR = O, VEC = [(C_M_AXI_GMEM32_ID_WIDTH-1):0]
PORT m_axi_gmem32_AWADDR = AWADDR, BUS = M_AXI_GMEM32, DIR = O, VEC = [(C_M_AXI_GMEM32_ADDR_WIDTH-1):0]
PORT m_axi_gmem32_AWLEN = AWLEN, BUS = M_AXI_GMEM32, DIR = O, VEC = [7:0]
PORT m_axi_gmem32_AWSIZE = AWSIZE, BUS = M_AXI_GMEM32, DIR = O, VEC = [2:0]
PORT m_axi_gmem32_AWBURST = AWBURST, BUS = M_AXI_GMEM32, DIR = O, VEC = [1:0]
PORT m_axi_gmem32_AWLOCK = AWLOCK, BUS = M_AXI_GMEM32, DIR = O, VEC = [1:0]
PORT m_axi_gmem32_AWCACHE = AWCACHE, BUS = M_AXI_GMEM32, DIR = O, VEC = [3:0]
PORT m_axi_gmem32_AWPROT = AWPROT, BUS = M_AXI_GMEM32, DIR = O, VEC = [2:0]
PORT m_axi_gmem32_AWQOS = AWQOS, BUS = M_AXI_GMEM32, DIR = O, VEC = [3:0]
PORT m_axi_gmem32_AWUSER = AWUSER, BUS = M_AXI_GMEM32, DIR = O, VEC = [(C_M_AXI_GMEM32_AWUSER_WIDTH-1):0], ISVALID = (C_M_AXI_GMEM32_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_gmem32_AWVALID = AWVALID, BUS = M_AXI_GMEM32, DIR = O
PORT m_axi_gmem32_AWREADY = AWREADY, BUS = M_AXI_GMEM32, DIR = I
PORT m_axi_gmem32_WDATA = WDATA, BUS = M_AXI_GMEM32, DIR = O, VEC = [(C_M_AXI_GMEM32_DATA_WIDTH-1):0]
PORT m_axi_gmem32_WSTRB = WSTRB, BUS = M_AXI_GMEM32, DIR = O, VEC = [((C_M_AXI_GMEM32_DATA_WIDTH/8)-1):0]
PORT m_axi_gmem32_WLAST = WLAST, BUS = M_AXI_GMEM32, DIR = O
PORT m_axi_gmem32_WUSER = WUSER, BUS = M_AXI_GMEM32, DIR = O, VEC = [(C_M_AXI_GMEM32_WUSER_WIDTH-1):0], ISVALID = (C_M_AXI_GMEM32_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_gmem32_WVALID = WVALID, BUS = M_AXI_GMEM32, DIR = O
PORT m_axi_gmem32_WREADY = WREADY, BUS = M_AXI_GMEM32, DIR = I
PORT m_axi_gmem32_BID = BID, BUS = M_AXI_GMEM32, DIR = I, VEC = [(C_M_AXI_GMEM32_ID_WIDTH-1):0]
PORT m_axi_gmem32_BRESP = BRESP, BUS = M_AXI_GMEM32, DIR = I, VEC = [1:0]
PORT m_axi_gmem32_BUSER = BUSER, BUS = M_AXI_GMEM32, DIR = I, VEC = [(C_M_AXI_GMEM32_BUSER_WIDTH-1):0], ISVALID = (C_M_AXI_GMEM32_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_gmem32_BVALID = BVALID, BUS = M_AXI_GMEM32, DIR = I
PORT m_axi_gmem32_BREADY = BREADY, BUS = M_AXI_GMEM32, DIR = O
PORT m_axi_gmem32_ARID = ARID, BUS = M_AXI_GMEM32, DIR = O, VEC = [(C_M_AXI_GMEM32_ID_WIDTH-1):0]
PORT m_axi_gmem32_ARADDR = ARADDR, BUS = M_AXI_GMEM32, DIR = O, VEC = [(C_M_AXI_GMEM32_ADDR_WIDTH-1):0]
PORT m_axi_gmem32_ARLEN = ARLEN, BUS = M_AXI_GMEM32, DIR = O, VEC = [7:0]
PORT m_axi_gmem32_ARSIZE = ARSIZE, BUS = M_AXI_GMEM32, DIR = O, VEC = [2:0]
PORT m_axi_gmem32_ARBURST = ARBURST, BUS = M_AXI_GMEM32, DIR = O, VEC = [1:0]
PORT m_axi_gmem32_ARLOCK = ARLOCK, BUS = M_AXI_GMEM32, DIR = O, VEC = [1:0]
PORT m_axi_gmem32_ARCACHE = ARCACHE, BUS = M_AXI_GMEM32, DIR = O, VEC = [3:0]
PORT m_axi_gmem32_ARPROT = ARPROT, BUS = M_AXI_GMEM32, DIR = O, VEC = [2:0]
PORT m_axi_gmem32_ARQOS = ARQOS, BUS = M_AXI_GMEM32, DIR = O, VEC = [3:0]
PORT m_axi_gmem32_ARUSER = ARUSER, BUS = M_AXI_GMEM32, DIR = O, VEC = [(C_M_AXI_GMEM32_ARUSER_WIDTH-1):0], ISVALID = (C_M_AXI_GMEM32_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_gmem32_ARVALID = ARVALID, BUS = M_AXI_GMEM32, DIR = O
PORT m_axi_gmem32_ARREADY = ARREADY, BUS = M_AXI_GMEM32, DIR = I
PORT m_axi_gmem32_RID = RID, BUS = M_AXI_GMEM32, DIR = I, VEC = [(C_M_AXI_GMEM32_ID_WIDTH-1):0]
PORT m_axi_gmem32_RDATA = RDATA, BUS = M_AXI_GMEM32, DIR = I, VEC = [(C_M_AXI_GMEM32_DATA_WIDTH-1):0]
PORT m_axi_gmem32_RRESP = RRESP, BUS = M_AXI_GMEM32, DIR = I, VEC = [1:0]
PORT m_axi_gmem32_RLAST = RLAST, BUS = M_AXI_GMEM32, DIR = I
PORT m_axi_gmem32_RUSER = RUSER, BUS = M_AXI_GMEM32, DIR = I, VEC = [(C_M_AXI_GMEM32_RUSER_WIDTH-1):0], ISVALID = (C_M_AXI_GMEM32_SUPPORTS_USER_SIGNALS == 1)
PORT m_axi_gmem32_RVALID = RVALID, BUS = M_AXI_GMEM32, DIR = I
PORT m_axi_gmem32_RREADY = RREADY, BUS = M_AXI_GMEM32, DIR = O

## AXI4 Slave
BUS_INTERFACE BUS = S_AXI_AXILITES, BUS_STD = AXI, BUS_TYPE = SLAVE

# Generics
PARAMETER C_S_AXI_AXILITES_BASEADDR = 0xffffffff, DT = std_logic_vector(31 downto 0), ADDR_TYPE = REGISTER, ASSIGNMENT = REQUIRE, PAIR = C_S_AXI_AXILITES_HIGHADDR, ADDRESS = BASE, MIN_SIZE = 0x20, TYPE = NON_HDL, BUS = S_AXI_AXILITES
PARAMETER C_S_AXI_AXILITES_HIGHADDR = 0x00000000, DT = std_logic_vector(31 downto 0), ADDR_TYPE = REGISTER, ASSIGNMENT = REQUIRE, PAIR = C_S_AXI_AXILITES_BASEADDR, ADDRESS = HIGH, TYPE = NON_HDL, BUS = S_AXI_AXILITES
PARAMETER C_S_AXI_AXILITES_ADDR_WIDTH = 8, DT = INTEGER, RANGE = (5:32), BUS = S_AXI_AXILITES
PARAMETER C_S_AXI_AXILITES_DATA_WIDTH = 32, DT = INTEGER, ASSIGNMENT = CONSTANT, BUS = S_AXI_AXILITES
PARAMETER C_S_AXI_AXILITES_PROTOCOL = AXI4LITE, DT = STRING, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, BUS = S_AXI_AXILITES

# Ports
PORT s_axi_AXILiteS_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_AXILITES_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_AXILITES
PORT s_axi_AXILiteS_AWVALID = AWVALID, DIR = I, BUS = S_AXI_AXILITES
PORT s_axi_AXILiteS_AWREADY = AWREADY, DIR = O, BUS = S_AXI_AXILITES
PORT s_axi_AXILiteS_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_AXILITES_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_AXILITES
PORT s_axi_AXILiteS_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_AXILITES_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI_AXILITES
PORT s_axi_AXILiteS_WVALID = WVALID, DIR = I, BUS = S_AXI_AXILITES
PORT s_axi_AXILiteS_WREADY = WREADY, DIR = O, BUS = S_AXI_AXILITES
PORT s_axi_AXILiteS_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_AXILITES
PORT s_axi_AXILiteS_BVALID = BVALID, DIR = O, BUS = S_AXI_AXILITES
PORT s_axi_AXILiteS_BREADY = BREADY, DIR = I, BUS = S_AXI_AXILITES
PORT s_axi_AXILiteS_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_AXILITES_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_AXILITES
PORT s_axi_AXILiteS_ARVALID = ARVALID, DIR = I, BUS = S_AXI_AXILITES
PORT s_axi_AXILiteS_ARREADY = ARREADY, DIR = O, BUS = S_AXI_AXILITES
PORT s_axi_AXILiteS_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_AXILITES_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_AXILITES
PORT s_axi_AXILiteS_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_AXILITES
PORT s_axi_AXILiteS_RVALID = RVALID, DIR = O, BUS = S_AXI_AXILITES
PORT s_axi_AXILiteS_RREADY = RREADY, DIR = I, BUS = S_AXI_AXILITES

# Output interrupt port for the AXI interface
PORT interrupt = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, INTERRUPT_PRIORITY = MEDIUM

# Syscall interface
PORT jamaica_syscall_V = "", DIR=O, SIGIS = INTERRUPT, SENSITIVITY = EDGE_RISING, INTERRUPT_PRIORITY = MEDIUM

END